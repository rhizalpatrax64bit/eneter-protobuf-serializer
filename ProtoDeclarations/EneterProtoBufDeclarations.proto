// MessageBusMessage
message MessageBusMessageProto
{
    required int32 Request = 1;
    required string Id = 2;
    optional bytes MessageDataBin = 3;
    optional string MessageDataStr = 4;
}

// MultiTypedMessage
message MultiTypedMessageProto
{
    required string TypeName = 1;
    optional bytes MessageDataBin = 2;
    optional string MessageDataStr = 3;
}

// Message for RPC.
message RpcMessageProto
{
    required int32 Id = 1;
    required int32 Flag = 2;
    required string OperationName = 3;
    repeated bytes SerializedData = 4;
    required string ErrorType = 5;
    required string ErrorMessage = 6;
    required string ErrorDetails = 7;
}

// EventArgs can be used in RPC communication.
message EventArgsProto
{
    required int32 dummy = 1;
}

// Message for ChannelWrapper/ChannelUnwrapper
message WrappedDataProto
{
    required string AddedData = 1;
    optional bytes OriginalDataBin = 2;
    optional string OriginalDataStr = 3;
}

// Message for Broker.
message BrokerMessageProto
{
    required int32 Request = 1;
    repeated string MessageTypes = 2;
    optional bytes MessageBin = 3;
    optional string MessageStr = 4;
}


// Monitored messaging.
message MonitorChannelMessageProto
{
    required int32 MessageType = 1;
    optional bytes MessageContentBin = 2;
    optional string MessageContentStr = 3;
}

// Empty message
message VoidMessageProto
{
    required int32 dummy = 1;
}